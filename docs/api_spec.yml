openapi: "3.0.3"
info:
  title: ZXSneakers RESTful API
  version: "1.0.0"
  description: "OPENAPI for ZXSneakers RESTful API"
  termsOfService: http://angga-r.netlify.app
  contact:
    name: Anggara
    email: shalangga047@gmail.com
    url: http://angga-r.netlify.app
servers:
  - url: https://api.zxsneakers.com/v1
paths:
  # ---- Auth ----

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login User and Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            example:
              email: example@gmail.com
              password: secretPassword123
      responses:
        "200":
          description: Login Success
          content:
            cookie:
              schema:
                type: string
              example:
                authToken: jwt-unique-token
        "400":
          description: Login Failed (check error message)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      email:
                        type: string
                      password:
                        type: string
              example:
                errors: { email: email not registered }
        "403":
          description: Forbidden access (if logged user try to access)

  /auth/register:
    post:
      tags:
        - Auth
      summary: Register User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                  minLength: 3
                  maxLength: 20
                password:
                  type: string
                  minLength: 7
                  maxLength: 100
            example:
              email: example@gmail.com
              name: Hamidah
              password: secretPassword123
      responses:
        "200":
          description: Register success
        "400":
          description: Bad request (check error message)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      email:
                        type: string
                      name:
                        type: string
                      password:
                        type: string
              example:
                errors:
                  {
                    email: email must be a valid email,
                    name: name length must be at least 3 characters long,
                    password: password length must be at least 7 characters long,
                  }
        "409":
          description: duplicate data
        "403":
          description: Forbidden access (if logged user try to access)

  /auth/logout:
    delete:
      tags:
        - Auth
      summary: Logout User and Admin
      parameters: [$ref: "#/components/parameters/Authorization"]
      responses:
        "200":
          description: Logout success
        "401":
          description: Logout failed (unauthorized)

  # ---- Admin ----

  /admin/email:
    get:
      summary: Get email admin
      parameters: [$ref: "#/components/parameters/Authorization"]
      tags:
        - Admin
      responses:
        "200":
          description: success get email
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
              example:
                email: "shalangga047@gmail.com"
        "403":
          description: Forbidden access
        "401":
          description: unauthorized

  /admin/password/update:
    put:
      tags:
        - Admin
      summary: Update password admin
      parameters: [$ref: "#/components/parameters/Authorization"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
                  minLength: 7
                  maxLength: 100
                confirmPassword:
                  type: string
            example:
              oldPassword: secretPassword123
              newPassword: newSecretPassword456
              confirmPassword: newSecretPassword456
      responses:
        "200":
          description: change password success
        "400":
          description: change password failed (check error message)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      oldPassword:
                        type: string
                      newPassword:
                        type: string
                      confirmPassword:
                        type: string
              example:
                errors:
                  {
                    oldPassword: incorrect old password,
                    newPassword: newPassword length must be at least 7 characters long,
                    confirmPassword: confirm password not same,
                  }
        "401":
          description: unauthorized

  # ---- Users ----

  /users/detail:
    get:
      tags:
        - Users
      summary: Get user detail
      parameters: [$ref: "#/components/parameters/Authorization"]
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  name:
                    type: string
                  avatar:
                    type: string
              example:
                email: test@gmail.com
                name: Anggara
                avatar: http://example.com/image.png

        "401":
          description: unauthorized

  /users/password/update:
    put:
      tags:
        - Users
      summary: Update Password User
      parameters: [$ref: "#/components/parameters/Authorization"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
                  minLength: 7
                  maxLength: 100
                confirmPassword:
                  type: string
            example:
              oldPassword: secretPassword123
              newPassword: newSecretPassword456
              confirmPassword: newSecretPassword456
      responses:
        "200":
          description: Success change password
        "400":
          description: change password failed (check error message)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      oldPassword:
                        type: string
                      newPassword:
                        type: string
                      confirmPassword:
                        type: string
              example:
                errors:
                  {
                    oldPassword: incorrect old password,
                    newPassword: newPassword length must be at least 7 characters long,
                    confirmPassword: confirm password not same,
                  }
        "401":
          description: unauthorized

  /users/name/update:
    put:
      tags:
        - Users
      summary: Change Name User
      parameters: [$ref: "#/components/parameters/Authorization"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  type: string
            example:
              newName: Anggara
      responses:
        "200":
          description: change name success
        "400":
          description: change name failed (check error message)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      newName:
                        type: string
              example:
                errors:
                  { newName: newName length must be at least 7 characters long }
        "401":
          description: unauthorized

  /users/avatar/update:
    post:
      tags:
        - Users
      summary: Change avatar / profile picture
      parameters: [$ref: "#/components/parameters/Authorization"]
      description: "
        format : image |
        max-size : 1MB
        "
      requestBody:
        required: true
        description: set enctype to multipart/form-data in form, and name="avatar"
        content:
          image/*:
            schema:
              type: string
              format: binary
              maximum: 1
      responses:
        "200":
          description: Upload avatar success
        "400":
          description: Upload avatar failed (check error message)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
              example:
                errors: file is too large. maximum limit is 1MB
        "401":
          description: unauthorized

  # ---- User Addresses ----

  /users/address:
    get:
      tags:
        - User Addresses
      summary: Get all user address
      parameters: [$ref: "#/components/parameters/Authorization"]

      responses:
        "200":
          description: success get all data address
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    properties:
                      id:
                        type: integer
                      no_telp:
                        type: string
                      postal_code:
                        type: string
                      street:
                        type: string
                      sub_distric:
                        type: string
                      city:
                        type: string
                      province:
                        type: string
                      country:
                        type: string
                  totalItem:
                    type: integer
                example:
                  data:
                    [
                      {
                        id: 1,
                        no_telp: "081222333444",
                        postal_code: "45412",
                        street: jalan mangga dua,
                        sub_distric: cimanggu,
                        city: bandung,
                        province: jawa barat,
                        country: indonesia,
                      },
                      {
                        id: 2,
                        no_telp: "081555666777",
                        postal_code: "45411",
                        street: jalan mangga tiga,
                        sub_distric: cimanggis,
                        city: karawang,
                        province: jawa barat,
                        country: indonesia,
                      },
                    ]
                  totalItem: 2

        "401":
          description: unauthorized
        "404":
          description: address is empty

  /users/address/{addressId}:
    get:
      tags:
        - User Addresses
      summary: get user address by ID
      parameters:
        [
          $ref: "#/components/parameters/Authorization",
          $ref: "#/components/parameters/AddressId",
        ]
      responses:
        "200":
          description: Success get address by Id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddressSchema"

        "404":
          description: data not found
        "401":
          description: unauthorized

  /users/address/add:
    post:
      tags:
        - User Addresses
      summary: Add an address for user
      parameters: [$ref: "#/components/parameters/Authorization"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddressSchema"
      responses:
        "200":
          description: Success add new address
        "400":
          description: Failed to add new address (check error message)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                example:
                  errors: { country: country is not allowed to be empty }
        "401":
          description: unauthorized

  /users/address/{addressId}/update:
    patch:
      tags:
        - User Addresses
      summary: Update user address
      parameters:
        [
          $ref: "#/components/parameters/Authorization",
          $ref: "#/components/parameters/AddressId",
        ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddressSchema"
      responses:
        "200":
          description: Success update address
        "404":
          description: data not found
        "400":
          description: update address failed (check error message)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                example:
                  errors:
                    { postal_code: postal_code is not allowed to be empty }
        "401":
          description: unauthorized

  /users/address/{addressId}/delete:
    delete:
      tags:
        - User Addresses
      summary: Delete user address
      parameters:
        [
          $ref: "#/components/parameters/Authorization",
          $ref: "#/components/parameters/AddressId",
        ]
      responses:
        "200":
          description: Delete address success
        "404":
          description: data not found
        "401":
          description: unauthorized

  # ---------- Product ------------

  /product/add:
    post:
      tags:
        - Product
      summary: Add new product (only admin)
      parameters: [$ref: "#/components/parameters/Authorization"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductSchemas"
      responses:
        "200":
          description: success add new product
        "400":
          description: failed add new product (check error message)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
              example:
                errors: { price: price is not allowed to be empty }
        "401":
          description: unauthorized
        "403":
          description: Forbidden access

  /product:
    get:
      tags:
        - Product
      summary: Get all product / search product
      parameters:
        - name: search
          in: query
          required: false
          description: if this parameter are not added, will return all data
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: if this parameter are not added, page = 1
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          description: if this parameter are not added, limit = 0
          schema:
            type: integer

      responses:
        "200":
          description: success get all product / search product
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    properties:
                      sku:
                        type: string
                      name:
                        type: string
                      price:
                        type: integer
                      stock:
                        type: integer
                      Product_color:
                        type: array
                        properties:
                          color:
                            type: string
                      Product_size:
                        type: array
                        properties:
                          size:
                            type: integer
                      Product_image:
                        type: array
                        properties:
                          data-img:
                            type: object
                            properties:
                              link:
                                type: string
                  paging:
                    type: object
                    properties:
                      page:
                        type: integer
                      totalPage:
                        type: integer
                      totalItem:
                        type: integer
                example:
                  data:
                    [
                      {
                        sku: "1-Nike-air-jordan",
                        name: "Nike air jordan",
                        price: 1800000,
                        stock: 4,
                        Product_color: ["red", "white", "blue"],
                        Product_size: [41, 42, 43],
                        Product_image:
                          [
                            { link: "example.com/img1.jpg" },
                            { link: "example.com/img2.png" },
                          ],
                      },
                      {
                        sku: "2-Adidas-mikey",
                        name: "Adidas mikey",
                        price: 590000,
                        stock: 42,
                        Product_color: ["green", "yellow", "grey"],
                        Product_size: [43, 45],
                        Product_image:
                          [
                            { link: "example.com/img3.jpg" },
                            { link: "example.com/img4.png" },
                          ],
                      },
                    ]
                  paging: { page: 1, totalPage: 1, totalItem: 2 }
        "404":
          description: empty product

  /product/{sku}:
    get:
      tags:
        - Product
      summary: Get product by SKU
      parameters: [$ref: "#/components/parameters/SKU-product"]
      responses:
        "200":
          description: Get product success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  sku:
                    type: string
                  name:
                    type: string
                  price:
                    type: integer
                  stock:
                    type: integer
                  created_at:
                    type: string
                  updated_at:
                    type: string
                  Product_color:
                    type: array
                    properties:
                      color:
                        type: string
                  Product_size:
                    type: array
                    properties:
                      size:
                        type: integer
                  Product_image:
                    type: array
                    properties:
                      data-img:
                        type: object
                        properties:
                          link:
                            type: string
              example:
                id: 1
                sku: "1-Nike-air-jordan"
                name: "Nike air jordan"
                price: 1800000
                stock: 4
                created_at: "2024-12-31T05:40:17.756Z"
                updated_at: "2024-12-31T05:40:17.756Z"
                Product_color: ["red", "white", "blue"]
                Product_size: [41, 42, 43]
                Product_image:
                  [
                    { link: "example.com/img1.jpg" },
                    { link: "example.com/img2.png" },
                  ]
        "404":
          description: data not found

  /product/{sku}/delete:
    delete:
      tags:
        - Product
      summary: Delete product (only admin)
      parameters:
        [
          $ref: "#/components/parameters/Authorization",
          $ref: "#/components/parameters/SKU-product",
        ]
      responses:
        "200":
          description: delete product success
        "404":
          description: data not found
        "401":
          description: unathorized
        "403":
          description: Forbidden access

  # ---------- Cart ------------

  /cart/add/{sku}:
    post:
      tags:
        - Cart
      summary: Add product to cart by user
      parameters:
        [
          $ref: "#/components/parameters/Authorization",
          $ref: "#/components/parameters/SKU-product",
        ]
      responses:
        "200":
          description: add product to cart success
        "404":
          description: product not found
        "401":
          description: unauthorized
        "409":
          description: duplicate data

  /cart:
    get:
      tags:
        - Cart
      summary: Get user cart
      parameters: [$ref: "#/components/parameters/Authorization"]
      responses:
        "200":
          description: get cart success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    properties:
                      product:
                        type: object
                        properties:
                          sku:
                            type: string
                          name:
                            type: string
                          price:
                            type: integer
                          stock:
                            type: integer
                          Product_color:
                            type: array
                            properties:
                              color:
                                type: string
                          Product_size:
                            type: array
                            properties:
                              size:
                                type: integer
                  totalItem:
                    type: integer
              example:
                "data":
                  [
                    {
                      "product":
                        {
                          "sku": "3_Adidas-mikey",
                          "name": "Adidas mikey",
                          "price": 170000,
                          "stock": 5,
                          "Product_color": ["green", "yellow", "midnight"],
                          "Product_size": [48, 45],
                        },
                    },
                    {
                      "product":
                        {
                          "sku": "5-Nike-jordan",
                          "name": "Nike jorda",
                          "price": 160000,
                          "stock": 53,
                          "Product_color": ["black", "silver", "blue"],
                          "Product_size": [41, 42, 43, 44, 45],
                        },
                    },
                  ]
                "totalItem": 2
        "401":
          description: unauthorized
        "404":
          description: empty

  /cart/{sku}/delete:
    delete:
      tags:
        - Cart
      summary: Delete product from cart
      parameters:
        [
          $ref: "#/components/parameters/Authorization",
          $ref: "#/components/parameters/SKU-product",
        ]
      responses:
        "200":
          description: delete product from cart success
        "401":
          description: unauthorized
        "404":
          description: data not found

  # ---------- Transaction ------------

  /order/add:
    post:
      tags:
        - Order
      summary: For user request to do transaction
      parameters: [$ref: "#/components/parameters/Authorization"]
      description: "This is using Midtrans Snap Pop-up. For how to use : https://docs.midtrans.com/reference/snap-js.\n The finishUrl in requestBody is to redirect the page after snap Pop-up. The page will receive order_id, status_code, and transaction_status from midtrans in query parameter."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: object
                  properties:
                    item:
                      type: array
                      properties:
                        sku:
                          type: string
                        color:
                          type: string
                        size:
                          type: integer
                        quantity:
                          type: integer
                addressId:
                  type: number
                finishUrl:
                  type: string
            example:
              items:
                [
                  {
                    sku: "1-Nike-air-jordan",
                    color: "red",
                    size: 43,
                    quantity: 2,
                  },
                  {
                    sku: "2-Adidas-mikey",
                    color: "black",
                    size: 42,
                    quantity: 1,
                  },
                ]
              addressId: 2
              finishUrl: "http://zxsneakers.com/transaction/status"
      responses:
        "200":
          description: request accepted (transaction will expire in 1 hour)
          content:
            application/json:
              schema:
                type: object
                properties:
                  snap_token:
                    type: string
                  snap_url:
                    type: string
                  clientKey:
                    type: string
              example:
                snap_token: token
                snap_url: url
                clientKey: midtrans_clientKey
        "400":
          description: request denied (check error message)
        "401":
          description: unathorized

  /order/success/{orderId}:
    post:
      tags:
        - Order
      summary: save success transaction to database
      description: After the finishUrl (in /order/add) received transaction status from midtrans, if the status_code = 200, hit this API for do saving data order to database
      parameters:
        [
          $ref: "#/components/parameters/Authorization",
          $ref: "#/components/parameters/orderId",
        ]
      responses:
        "200":
          description: data order saved
        "404":
          description: data not found (data was expired or wrong input orderId)
        "401":
          description: unathorized

components:
  parameters:
    Authorization:
      name: authToken
      in: cookie
      required: true
      description: Access token for authentication
      schema:
        type: string

    AddressId:
      name: addressId
      in: path
      required: true
      schema:
        type: integer

    SKU-product:
      name: SKU-product
      in: path
      required: true
      schema:
        type: string

    orderId:
      name: orderId
      in: path
      required: true
      schema:
        type: string

  schemas:
    AddressSchema:
      type: object
      properties:
        no_telp:
          type: string
          maxLength: 20
        postal_code:
          type: string
          maxLength: 11
        street:
          type: string
          maxLength: 100
        sub_distric:
          type: string
          maxLength: 100
        city:
          type: string
          maxLength: 100
        province:
          type: string
          maxLength: 100
        country:
          type: string
          maxLength: 100
      example:
        no_telp: "081222333444"
        postal_code: "45412"
        street: jalan mangga dua
        sub_distric: cimanggu
        city: bandung
        province: jawa barat
        country: indonesia

    ProductSchemas:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        price:
          type: integer
          maxLength: 11
        stock:
          type: integer
          maxLength: 11
        colors:
          type: array
          maxItems: 5
          properties:
            color:
              type: string
              maxLength: 20
        sizes:
          type: array
          maxItems: 5
          properties:
            size:
              type: integer
              maxLength: 11
        product-image:
          type: array
          description: set enctype to multipart/form-data in form, and name="product-image"
          minItems: 1
          maxItems: 5
      example:
        name: "Nike air jordan"
        price: 1800000
        stock: 4
        colors: ["red", "white", "blue"]
        sizes: [41, 42, 43]
        product-image: [image1.png, image2.jpg, image3.jpeg]
